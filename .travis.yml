language: rust
sudo: false
rust:
    - nightly

addons:
    apt:
        sources:
            - ubuntu-toolchain-r-test
        packages:
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
            - cmake
            - gcc-5
            - g++-5
            - binutils-dev
            - libiberty-dev
env:
    - CC=gcc-5 CXX=g++-5

script:
    # Ensure the output path is empty of possible previous results. We don't
    # want to repeat these tests. Travis' cargo caching leaves old results in.
    #
    # We're not building "release version" anyway so faster compile times are
    # worth the less deterministic behavior here.
    - rm target/debug/* >& /dev/null || true
    - cargo install clippy --force
    - cargo clippy --all -- -D warnings
    - cargo test
    - mkdir build
    - cd build
    - cmake ..
    - make
    - cd bin
    - ./cpp-raw

after_success: |
    export LD_LIBRARY_PATH=/home/travis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib &&
    wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
    tar xzf master.tar.gz &&
    cd kcov-master &&
    mkdir build &&
    cd build &&
    cmake .. &&
    make &&
    make install DESTDIR=../../kcov-build &&
    cd ../.. &&
    rm -rf kcov-master &&
    for file in target/debug/intercom*-????????????????;
    do
        mkdir -p "target/cov/$(basename $file)";
        ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file";
    done &&
    for file in intercom-attributes/tests/data/*.source.rs;
    do
        mkdir -p "target/cov/$(basename $file)";
        CARGO_PKG_NAME="source" ./kcov-build/usr/local/bin/kcov --include-pattern=${PWD} --verify "target/cov/$(basename $file)" rustc --crate-name source --crate-type lib "$file" --out-dir target/test_out -L dependency=target/debug/deps --extern intercom=target/debug/libintercom.rlib --pretty=expanded -Z unstable-options > /dev/null;
    done &&
    bash <(curl -s https://codecov.io/bash) &&
    echo "Uploaded code coverage"
