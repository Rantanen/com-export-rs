#![feature(prelude_import)]
#![no_std]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
extern crate intercom;
use intercom::*;

pub trait Foo {
    fn static_method(a: u16, b: i16);

    fn simple_method(&self);

    fn arg_method(&self, a: u16);

    fn simple_result_method(&self) -> u16;
    fn com_result_method(&self) -> ComResult<u16>;
    fn rust_result_method(&self) -> Result<u16, i32>;

    fn complete_method(&mut self, a: u16, b: i16) -> ComResult<bool>;

    fn string_method(&self, msg: String) -> String;
    fn comitf_method(&self, itf: ComItf<dyn Foo>) -> ComResult<ComItf<dyn IUnknown>>;

    // Should be VARIANT_BOOL in Automation interface.
    fn bool_method(&self, input: bool) -> ComResult<bool>;

    fn variant_method(&self, input: Variant) -> ComResult<Variant>;
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(clippy::all)]
#[repr(C)]
#[doc(hidden)]
pub struct __IntercomVtableForFoo_Automation {
    pub __base: <dyn intercom::IUnknown as
                intercom::attributes::ComInterface<intercom::type_system::AutomationTypeSystem>>::VTable,
    pub simple_method: unsafe extern "system" fn(self_vtable:
                                                     intercom::RawComPtr)
                           ->
                               <() as
                               intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub arg_method: unsafe extern "system" fn(self_vtable:
                                                  intercom::RawComPtr,
                                              a:
                                                  <u16 as
                                                  intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType)
                        ->
                            <() as
                            intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub simple_result_method: unsafe extern "system" fn(self_vtable:
                                                            intercom::RawComPtr)
                                  ->
                                      <u16 as
                                      intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub com_result_method: unsafe extern "system" fn(self_vtable:
                                                         intercom::RawComPtr,
                                                     __out:
                                                         *mut <u16 as
                                                              intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType)
                               ->
                                   <intercom::raw::HRESULT as
                                   intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub rust_result_method: unsafe extern "system" fn(self_vtable:
                                                          intercom::RawComPtr,
                                                      __out:
                                                          *mut <u16 as
                                                               intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType)
                                ->
                                    <intercom::raw::HRESULT as
                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub complete_method: unsafe extern "system" fn(self_vtable:
                                                       intercom::RawComPtr,
                                                   a:
                                                       <u16 as
                                                       intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType,
                                                   b:
                                                       <i16 as
                                                       intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType,
                                                   __out:
                                                       *mut <bool as
                                                            intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType)
                             ->
                                 <intercom::raw::HRESULT as
                                 intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub string_method: unsafe extern "system" fn(self_vtable:
                                                     intercom::RawComPtr,
                                                 msg:
                                                     <String as
                                                     intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType)
                           ->
                               <String as
                               intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub comitf_method: unsafe extern "system" fn(self_vtable:
                                                     intercom::RawComPtr,
                                                 itf:
                                                     <ComItf<dyn Foo> as
                                                     intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType,
                                                 __out:
                                                     *mut <ComItf<dyn IUnknown>
                                                          as
                                                          intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType)
                           ->
                               <intercom::raw::HRESULT as
                               intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub bool_method: unsafe extern "system" fn(self_vtable:
                                                   intercom::RawComPtr,
                                               input:
                                                   <bool as
                                                   intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType,
                                               __out:
                                                   *mut <bool as
                                                        intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType)
                         ->
                             <intercom::raw::HRESULT as
                             intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub variant_method: unsafe extern "system" fn(self_vtable:
                                                      intercom::RawComPtr,
                                                  input:
                                                      <Variant as
                                                      intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType,
                                                  __out:
                                                      *mut <Variant as
                                                           intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType)
                            ->
                                <intercom::raw::HRESULT as
                                intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(clippy::all)]
#[doc(hidden)]
impl intercom::attributes::ComInterface<intercom::type_system::AutomationTypeSystem> for dyn Foo {
    type VTable = __IntercomVtableForFoo_Automation;
    fn iid() -> &'static intercom::IID {
        &intercom::GUID {
            data1: 0u32,
            data2: 0u16,
            data3: 0u16,
            data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
        }
    }
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(clippy::all)]
#[repr(C)]
#[doc(hidden)]
pub struct __IntercomVtableForFoo_Raw {
    pub __base: <dyn intercom::IUnknown as
                intercom::attributes::ComInterface<intercom::type_system::AutomationTypeSystem>>::VTable,
    pub simple_method: unsafe extern "system" fn(self_vtable:
                                                     intercom::RawComPtr)
                           ->
                               <() as
                               intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub arg_method: unsafe extern "system" fn(self_vtable:
                                                  intercom::RawComPtr,
                                              a:
                                                  <u16 as
                                                  intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType)
                        ->
                            <() as
                            intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType,
    pub simple_result_method: unsafe extern "system" fn(self_vtable:
                                                            intercom::RawComPtr)
                                  ->
                                      <u16 as
                                      intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
    pub com_result_method: unsafe extern "system" fn(self_vtable:
                                                         intercom::RawComPtr,
                                                     __out:
                                                         *mut <u16 as
                                                              intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType)
                               ->
                                   <intercom::raw::HRESULT as
                                   intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
    pub rust_result_method: unsafe extern "system" fn(self_vtable:
                                                          intercom::RawComPtr,
                                                      __out:
                                                          *mut <u16 as
                                                               intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType)
                                ->
                                    <intercom::raw::HRESULT as
                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
    pub complete_method: unsafe extern "system" fn(self_vtable:
                                                       intercom::RawComPtr,
                                                   a:
                                                       <u16 as
                                                       intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType,
                                                   b:
                                                       <i16 as
                                                       intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType,
                                                   __out:
                                                       *mut <bool as
                                                            intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType)
                             ->
                                 <intercom::raw::HRESULT as
                                 intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
    pub string_method: unsafe extern "system" fn(self_vtable:
                                                     intercom::RawComPtr,
                                                 msg:
                                                     <String as
                                                     intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType)
                           ->
                               <String as
                               intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
    pub comitf_method: unsafe extern "system" fn(self_vtable:
                                                     intercom::RawComPtr,
                                                 itf:
                                                     <ComItf<dyn Foo> as
                                                     intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType,
                                                 __out:
                                                     *mut <ComItf<dyn IUnknown>
                                                          as
                                                          intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType)
                           ->
                               <intercom::raw::HRESULT as
                               intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
    pub bool_method: unsafe extern "system" fn(self_vtable:
                                                   intercom::RawComPtr,
                                               input:
                                                   <bool as
                                                   intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType,
                                               __out:
                                                   *mut <bool as
                                                        intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType)
                         ->
                             <intercom::raw::HRESULT as
                             intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
    pub variant_method: unsafe extern "system" fn(self_vtable:
                                                      intercom::RawComPtr,
                                                  input:
                                                      <Variant as
                                                      intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType,
                                                  __out:
                                                      *mut <Variant as
                                                           intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType)
                            ->
                                <intercom::raw::HRESULT as
                                intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType,
}
#[allow(non_camel_case_types)]
#[allow(non_snake_case)]
#[allow(clippy::all)]
#[doc(hidden)]
impl intercom::attributes::ComInterface<intercom::type_system::RawTypeSystem> for dyn Foo {
    type VTable = __IntercomVtableForFoo_Raw;
    fn iid() -> &'static intercom::IID {
        &intercom::GUID {
            data1: 0u32,
            data2: 0u16,
            data3: 0u16,
            data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
        }
    }
}
#[allow(clippy::all)]
impl Foo for intercom::ComItf<dyn Foo> {
    fn arg_method(&self, a: u16) -> () {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"arg_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"arg_method", &"Automation") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<(), intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).arg_method)(
                    comptr.ptr,
                    (<u16 as intercom::type_system::ExternType<
                        intercom::type_system::AutomationTypeSystem,
                    >>::intercom_from(a)?)
                    .intercom_into()?,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({})
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <() as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"arg_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<(), intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).arg_method)(
                    comptr.ptr,
                    (<u16 as intercom::type_system::ExternType<
                        intercom::type_system::RawTypeSystem,
                    >>::intercom_from(a)?)
                    .intercom_into()?,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({})
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <() as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <() as intercom::ErrorValue>::from_com_error(intercom::ComError::E_POINTER.into())
    }
    fn bool_method(&self, input: bool) -> ComResult<bool> {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"bool_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"bool_method", &"Automation") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<bool>, intercom::ComError> = (|| unsafe {
                let mut __out: <bool as intercom::type_system::ExternType<
                    intercom::type_system::AutomationTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).bool_method)(
                    comptr.ptr,
                    (<bool as intercom::type_system::ExternType<
                        intercom::type_system::AutomationTypeSystem,
                    >>::intercom_from(input)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<bool> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"bool_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<bool>, intercom::ComError> = (|| unsafe {
                let mut __out: <bool as intercom::type_system::ExternType<
                    intercom::type_system::RawTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).bool_method)(
                    comptr.ptr,
                    (<bool as intercom::type_system::ExternType<
                        intercom::type_system::RawTypeSystem,
                    >>::intercom_from(input)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<bool> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <ComResult<bool> as intercom::ErrorValue>::from_com_error(
            intercom::ComError::E_POINTER.into(),
        )
    }
    fn com_result_method(&self) -> ComResult<u16> {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"com_result_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (
                            &self,
                            &comptr.ptr,
                            &"Foo",
                            &"com_result_method",
                            &"Automation",
                        ) {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<u16>, intercom::ComError> = (|| unsafe {
                let mut __out: <u16 as intercom::type_system::ExternType<
                    intercom::type_system::AutomationTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).com_result_method)(comptr.ptr, &mut __out);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<u16> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"com_result_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<u16>, intercom::ComError> = (|| unsafe {
                let mut __out: <u16 as intercom::type_system::ExternType<
                    intercom::type_system::RawTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).com_result_method)(comptr.ptr, &mut __out);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<u16> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <ComResult<u16> as intercom::ErrorValue>::from_com_error(
            intercom::ComError::E_POINTER.into(),
        )
    }
    fn comitf_method(&self, itf: ComItf<dyn Foo>) -> ComResult<ComItf<dyn IUnknown>> {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"comitf_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"comitf_method", &"Automation") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<
                ComResult<ComItf<dyn IUnknown>>,
                intercom::ComError,
            > = (|| unsafe {
                let mut __out: <ComItf<dyn IUnknown> as intercom::type_system::ExternType<
                    intercom::type_system::AutomationTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).comitf_method)(
                    comptr.ptr,
                    (<ComItf<dyn Foo> as intercom::type_system::ExternType<
                        intercom::type_system::AutomationTypeSystem,
                    >>::intercom_from(itf)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => {
                    <ComResult<ComItf<dyn IUnknown>> as intercom::ErrorValue>::from_com_error(err)
                }
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"comitf_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<
                ComResult<ComItf<dyn IUnknown>>,
                intercom::ComError,
            > = (|| unsafe {
                let mut __out: <ComItf<dyn IUnknown> as intercom::type_system::ExternType<
                    intercom::type_system::RawTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).comitf_method)(
                    comptr.ptr,
                    (<ComItf<dyn Foo> as intercom::type_system::ExternType<
                        intercom::type_system::RawTypeSystem,
                    >>::intercom_from(itf)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => {
                    <ComResult<ComItf<dyn IUnknown>> as intercom::ErrorValue>::from_com_error(err)
                }
            };
        }
        <ComResult<ComItf<dyn IUnknown>> as intercom::ErrorValue>::from_com_error(
            intercom::ComError::E_POINTER.into(),
        )
    }
    fn complete_method(&mut self, a: u16, b: i16) -> ComResult<bool> {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"complete_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (
                            &self,
                            &comptr.ptr,
                            &"Foo",
                            &"complete_method",
                            &"Automation",
                        ) {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<bool>, intercom::ComError> = (|| unsafe {
                let mut __out: <bool as intercom::type_system::ExternType<
                    intercom::type_system::AutomationTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).complete_method)(
                    comptr.ptr,
                    (<u16 as intercom::type_system::ExternType<
                        intercom::type_system::AutomationTypeSystem,
                    >>::intercom_from(a)?)
                    .intercom_into()?,
                    (<i16 as intercom::type_system::ExternType<
                        intercom::type_system::AutomationTypeSystem,
                    >>::intercom_from(b)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<bool> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"complete_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<bool>, intercom::ComError> = (|| unsafe {
                let mut __out: <bool as intercom::type_system::ExternType<
                    intercom::type_system::RawTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).complete_method)(
                    comptr.ptr,
                    (<u16 as intercom::type_system::ExternType<
                        intercom::type_system::RawTypeSystem,
                    >>::intercom_from(a)?)
                    .intercom_into()?,
                    (<i16 as intercom::type_system::ExternType<
                        intercom::type_system::RawTypeSystem,
                    >>::intercom_from(b)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<bool> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <ComResult<bool> as intercom::ErrorValue>::from_com_error(
            intercom::ComError::E_POINTER.into(),
        )
    }
    fn rust_result_method(&self) -> Result<u16, i32> {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"rust_result_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (
                            &self,
                            &comptr.ptr,
                            &"Foo",
                            &"rust_result_method",
                            &"Automation",
                        ) {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<Result<u16, i32>, intercom::ComError> = (|| unsafe {
                let mut __out: <u16 as intercom::type_system::ExternType<
                    intercom::type_system::AutomationTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).rust_result_method)(comptr.ptr, &mut __out);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <Result<u16, i32> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"rust_result_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<Result<u16, i32>, intercom::ComError> = (|| unsafe {
                let mut __out: <u16 as intercom::type_system::ExternType<
                    intercom::type_system::RawTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).rust_result_method)(comptr.ptr, &mut __out);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <Result<u16, i32> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <Result<u16, i32> as intercom::ErrorValue>::from_com_error(
            intercom::ComError::E_POINTER.into(),
        )
    }
    fn simple_method(&self) -> () {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"simple_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"simple_method", &"Automation") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<(), intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).simple_method)(comptr.ptr);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({})
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <() as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"simple_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<(), intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).simple_method)(comptr.ptr);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({})
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <() as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <() as intercom::ErrorValue>::from_com_error(intercom::ComError::E_POINTER.into())
    }
    fn simple_result_method(&self) -> u16 {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"simple_result_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (
                            &self,
                            &comptr.ptr,
                            &"Foo",
                            &"simple_result_method",
                            &"Automation",
                        ) {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<u16, intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).simple_result_method)(comptr.ptr);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({ __result.intercom_into()? })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <u16 as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"simple_result_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<u16, intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).simple_result_method)(comptr.ptr);
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({ __result.intercom_into()? })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <u16 as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <u16 as intercom::ErrorValue>::from_com_error(intercom::ComError::E_POINTER.into())
    }
    fn string_method(&self, msg: String) -> String {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"string_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"string_method", &"Automation") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<String, intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).string_method)(
                    comptr.ptr,
                    (<String as intercom::type_system::ExternType<
                        intercom::type_system::AutomationTypeSystem,
                    >>::intercom_from(msg)?)
                    .intercom_into()?,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({ __result.intercom_into()? })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <String as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"string_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<String, intercom::ComError> = (|| unsafe {
                let __result = ((**vtbl).string_method)(
                    comptr.ptr,
                    (<String as intercom::type_system::ExternType<
                        intercom::type_system::RawTypeSystem,
                    >>::intercom_from(msg)?)
                    .intercom_into()?,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({ __result.intercom_into()? })
            })();
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <String as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <String as intercom::ErrorValue>::from_com_error(intercom::ComError::E_POINTER.into())
    }
    fn variant_method(&self, input: Variant) -> ComResult<Variant> {
        intercom::logging::trace(|l| {
            l(
                "testcrate",
                ::core::fmt::Arguments::new_v1(
                    &["[", "] Calling ", "::"],
                    &match (&self, &"Foo", &"variant_method") {
                        (arg0, arg1, arg2) => [
                            ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                            ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Display::fmt),
                            ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                        ],
                    },
                ),
            )
        });
        #[allow(unused_imports)]
        use intercom::ErrorValue;
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::AutomationTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"variant_method", &"Automation") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<Variant>, intercom::ComError> = (|| unsafe {
                let mut __out: <Variant as intercom::type_system::ExternType<
                    intercom::type_system::AutomationTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).variant_method)(
                    comptr.ptr,
                    (<Variant as intercom::type_system::ExternType<
                        intercom::type_system::AutomationTypeSystem,
                    >>::intercom_from(input)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })(
            );
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<Variant> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        if let Some(comptr) =
            intercom::ComItf::maybe_ptr::<intercom::type_system::RawTypeSystem>(self)
        {
            intercom::logging::trace(|l| {
                l(
                    "testcrate",
                    ::core::fmt::Arguments::new_v1(
                        &["[", ", with ", "] Calling ", "::", ", type system: "],
                        &match (&self, &comptr.ptr, &"Foo", &"variant_method", &"Raw") {
                            (arg0, arg1, arg2, arg3, arg4) => [
                                ::core::fmt::ArgumentV1::new(arg0, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg1, ::core::fmt::Pointer::fmt),
                                ::core::fmt::ArgumentV1::new(arg2, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg3, ::core::fmt::Display::fmt),
                                ::core::fmt::ArgumentV1::new(arg4, ::core::fmt::Display::fmt),
                            ],
                        },
                    ),
                )
            });
            #[allow(unused_imports)]
            use intercom::type_system::{IntercomFrom, IntercomInto};
            let vtbl = comptr.ptr
                as *const *const <dyn Foo as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::VTable;
            #[allow(unused_unsafe)]
            let __intercom_result: Result<ComResult<Variant>, intercom::ComError> = (|| unsafe {
                let mut __out: <Variant as intercom::type_system::ExternType<
                    intercom::type_system::RawTypeSystem,
                >>::ExternOutputType = intercom::type_system::ExternDefault::extern_default();
                let __result = ((**vtbl).variant_method)(
                    comptr.ptr,
                    (<Variant as intercom::type_system::ExternType<
                        intercom::type_system::RawTypeSystem,
                    >>::intercom_from(input)?)
                    .intercom_into()?,
                    &mut __out,
                );
                let __intercom_iid = intercom::GUID {
                    data1: 0u32,
                    data2: 0u16,
                    data3: 0u16,
                    data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8],
                };
                Ok({
                    if __result == intercom::raw::S_OK || __result == intercom::raw::S_FALSE {
                        Ok(__out.intercom_into()?)
                    } else {
                        return Err(intercom::load_error(
                            self.as_ref(),
                            &__intercom_iid,
                            __result,
                        ));
                    }
                })
            })(
            );
            return match __intercom_result {
                Ok(v) => v,
                Err(err) => <ComResult<Variant> as intercom::ErrorValue>::from_com_error(err),
            };
        }
        <ComResult<Variant> as intercom::ErrorValue>::from_com_error(
            intercom::ComError::E_POINTER.into(),
        )
    }
}
impl intercom::ComInterface for dyn Foo {
    #[doc = "Returns the IID of the requested interface."]
    fn iid_ts<TS: intercom::type_system::TypeSystem>() -> &'static intercom::IID
    where
        Self: intercom::attributes::ComInterface<TS>,
    {
        <Self as intercom::attributes::ComInterface<TS>>::iid()
    }
    fn iid(ts: intercom::type_system::TypeSystemName) -> Option<&'static intercom::IID> {
        match ts {
            intercom::type_system::TypeSystemName::Automation => {
                Some(<Self as intercom::attributes::ComInterface<
                    intercom::type_system::AutomationTypeSystem,
                >>::iid())
            }
            intercom::type_system::TypeSystemName::Raw => {
                Some(<Self as intercom::attributes::ComInterface<
                    intercom::type_system::RawTypeSystem,
                >>::iid())
            }
        }
    }
    fn deref(com_itf: &intercom::ComItf<dyn Foo>) -> &(dyn Foo + 'static) {
        com_itf
    }
}
impl intercom::type_system::BidirectionalTypeInfo for dyn Foo {
    #[doc = r" The name of the type."]
    fn type_name() -> &'static str {
        "Foo"
    }
}
#[allow(non_snake_case)]
#[allow(dead_code)]
impl intercom::attributes::InterfaceHasTypeInfo for dyn Foo {
    fn gather_type_info() -> Vec<intercom::typelib::TypeInfo> {
        let variants =
            <[_]>::into_vec(box
                                [intercom::ComBox::new(intercom::typelib::InterfaceVariant{ts:
                                                                                               intercom::type_system::TypeSystemName::Automation,
                                                                                           iid:
                                                                                               intercom::GUID{data1:
                                                                                                                  0u32,
                                                                                                              data2:
                                                                                                                  0u16,
                                                                                                              data3:
                                                                                                                  0u16,
                                                                                                              data4:
                                                                                                                  [0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8],},
                                                                                           methods:
                                                                                               <[_]>::into_vec(box
                                                                                                                   [intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "simple_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   "void".into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   0,
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            []),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "arg_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   "void".into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   0,
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "a".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "simple_result_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<u16
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<u16
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            []),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "com_result_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "rust_result_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<i32
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<i32
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "complete_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "a".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "b".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<i16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<i16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "string_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<String
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<String
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "msg".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<String
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<String
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "comitf_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "itf".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<ComItf<dyn Foo>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<ComItf<dyn Foo>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<ComItf<dyn IUnknown>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<ComItf<dyn IUnknown>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "bool_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "input".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "variant_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "input".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::AutomationTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),})]),}),
                                 intercom::ComBox::new(intercom::typelib::InterfaceVariant{ts:
                                                                                               intercom::type_system::TypeSystemName::Raw,
                                                                                           iid:
                                                                                               intercom::GUID{data1:
                                                                                                                  0u32,
                                                                                                              data2:
                                                                                                                  0u16,
                                                                                                              data3:
                                                                                                                  0u16,
                                                                                                              data4:
                                                                                                                  [0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   0u8,
                                                                                                                   1u8],},
                                                                                           methods:
                                                                                               <[_]>::into_vec(box
                                                                                                                   [intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "simple_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   "void".into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   0,
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            []),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "arg_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   "void".into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   0,
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "a".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "simple_result_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<u16
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<u16
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            []),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "com_result_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "rust_result_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<i32
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<i32
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "complete_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "a".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<u16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "b".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<i16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<i16
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "string_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<String
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<String
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "msg".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<String
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<String
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "comitf_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "itf".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<ComItf<dyn Foo>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<ComItf<dyn Foo>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<ComItf<dyn IUnknown>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<ComItf<dyn IUnknown>
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "bool_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "input".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<bool
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),}),
                                                                                                                    intercom::ComBox::new(intercom::typelib::Method{name:
                                                                                                                                                                        "variant_method".into(),
                                                                                                                                                                    return_type:
                                                                                                                                                                        intercom::typelib::Arg{name:
                                                                                                                                                                                                   "".into(),
                                                                                                                                                                                               ty:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                               indirection_level:
                                                                                                                                                                                                   <<intercom::raw::HRESULT
                                                                                                                                                                                                    as
                                                                                                                                                                                                    intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                       as
                                                                                                                                                                                                       intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                               direction:
                                                                                                                                                                                                   intercom::typelib::Direction::Return,},
                                                                                                                                                                    parameters:
                                                                                                                                                                        <[_]>::into_vec(box
                                                                                                                                                                                            [intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "input".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternInputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::InputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::In,},
                                                                                                                                                                                             intercom::typelib::Arg{name:
                                                                                                                                                                                                                        "__out".into(),
                                                                                                                                                                                                                    ty:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::type_name().into(),
                                                                                                                                                                                                                    indirection_level:
                                                                                                                                                                                                                        <<Variant
                                                                                                                                                                                                                         as
                                                                                                                                                                                                                         intercom::type_system::ExternType<intercom::type_system::RawTypeSystem>>::ExternOutputType
                                                                                                                                                                                                                            as
                                                                                                                                                                                                                            intercom::type_system::OutputTypeInfo>::indirection_level(),
                                                                                                                                                                                                                    direction:
                                                                                                                                                                                                                        intercom::typelib::Direction::Retval,}]),})]),})]);
        <[_]>::into_vec(box [intercom::typelib::TypeInfo::Interface(
            intercom::ComBox::new(intercom::typelib::Interface {
                name: "Foo".into(),
                variants: variants,
                options: intercom::typelib::InterfaceOptions {
                    class_impl_interface: false,
                    ..Default::default()
                },
            }),
        )])
    }
}
